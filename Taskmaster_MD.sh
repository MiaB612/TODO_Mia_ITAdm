#!/bin/bash

# Projekt IT Administrator -- easyTASKMASTER/spr√°vce √∫kol≈Ø

# Modularita pro barvy a export do markdown
source "./colors.sh"
source "./exportmd.sh"

# Vytv√°≈ô√≠m soubor s √∫koly = promƒõnn√° definuje soubor
TASK_FILE="tasks.txt"

# Funkce p≈ôidat √∫kol
add_task() {
    read -p "$(echo -e "${BOLD}üìù  Zadej popis nov√©ho √∫kolu:${NC} ")" task

    if [[ -z "$task" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  √ökol nem≈Ø≈æe b√Ωt pr√°zdn√Ω!${NC}" # echo -e umo≈æn√≠ barvy
        return
    fi

    echo "[ ] $task" >> "$TASK_FILE"
    echo -e "${GREEN}‚úÖ  √ökol p≈ôid√°n.${NC}" # dtto
}

# Funkce zobraz√≠ vlo≈æen√© √∫koly, barvy
show_tasks() {
    if [[ ! -s "$TASK_FILE" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  ≈Ω√°dn√© √∫koly k zobrazen√≠${NC}"
        return
    fi

    echo -e "${CYAN}${BOLD}üìã  Seznam √∫kol≈Ø:${NC}"
    echo -e "${CYAN}-----------------${NC}"
    echo

    local i=1
    while IFS= read -r line; do
        echo -e "${BOLD}${i})${NC} $line"
        ((i++))
    done < "$TASK_FILE"
}

# Funkce zobraz√≠ hlavn√≠ menu, barvy a bold
show_menu() {
  echo -e "${GREEN}${BOLD}----------------------------------------"
  echo -e "             easyTASKMASTER "
  echo -e "----------------------------------------${NC}"
  echo -e "${BOLD}1)${NC} Zobrazit v≈°echny √∫koly"
  echo -e "${BOLD}2)${NC} P≈ôidat nov√Ω √∫kol"
  echo -e "${BOLD}3)${NC} Oznaƒçit √∫kol jako dokonƒçen√Ω"
  echo -e "${BOLD}4)${NC} Smazat √∫kol"
  echo -e "${BOLD}5)${NC} Export do Markdown"
  echo -e "${BOLD}6)${NC} Konec"
  echo
}

#  Funkce zobraz√≠ √∫kol jako od≈°krtnut√Ω, barvy
mark_task_done() {
    if [[ ! -s "$TASK_FILE" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  ≈Ω√°dn√© √∫koly k oznaƒçen√≠${NC}"
        return
    fi

    show_tasks
   read -p "$(echo -e "${GREEN}${BOLD}üî¢  Zadej ƒç√≠slo √∫kolu, kter√Ω je hotov√Ω:${NC} ")" index


    if ! [[ "$index" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}‚ùå  Neplatn√© ƒç√≠slo.${NC}"
        return
    fi

    total=$(wc -l < "$TASK_FILE")
    if (( index < 1 || index > total )); then
        echo -e "${RED}üö´  √ökol s t√≠mto ƒç√≠slem neexistuje.${NC}"
        return
    fi

    tmp_file=$(mktemp)
    line_num=1

    while IFS= read -r line; do
        if [[ $line_num -eq $index ]]; then
            updated_line="${line/\[ \]/[x]}"
            echo "$updated_line" >> "$tmp_file"
        else
            echo "$line" >> "$tmp_file"
        fi
        ((line_num++))
    done < "$TASK_FILE"

    mv "$tmp_file" "$TASK_FILE"
    echo -e "${GREEN}üü¢  √ökol ƒç. $index oznaƒçen jako dokonƒçen√Ω.${NC}"
}

# Funkce sma≈æe √∫kol podle ƒç√≠sla
delete_task() {
    if [[ ! -s "$TASK_FILE" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  ≈Ω√°dn√© √∫koly ke smaz√°n√≠.${NC}"
        return
    fi

    show_tasks
    read -p "$(echo -e "${BOLD}üóëÔ∏è  Zadej ƒç√≠slo √∫kolu, kter√Ω chce≈° smazat:${NC} ")" index

    if ! [[ "$index" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}‚ùå  Neplatn√© ƒç√≠slo.${NC}"
        return
    fi

    total=$(wc -l < "$TASK_FILE")
    if (( index < 1 || index > total )); then
        echo -e "${RED}üö´  √ökol s t√≠mto ƒç√≠slem neexistuje.${NC}"
        return
    fi

    tmp_file=$(mktemp)
    line_num=1

    while IFS= read -r line; do
        if [[ $line_num -ne $index ]]; then
            echo "$line" >> "$tmp_file"
        fi
        ((line_num++))
    done < "$TASK_FILE"

    mv "$tmp_file" "$TASK_FILE"
    echo -e "${GREEN}üóëÔ∏è  √ökol ƒç. $index byl smaz√°n.${NC}"
}

# Hlavn√≠ smyƒçka programu
main_loop() {
  while true; do
    show_menu
    read -p "Zadej volbu [1-6]: " choice
    echo
    case $choice in
      1) show_tasks ;;
      2) add_task ;;
      3) mark_task_done ;;
      4) delete_task ;;
      5) export_to_md ;;
      6) echo "Ukonƒçuji..."; break ;;
      *) echo -e "${RED}‚ùå  Neplatn√° volba, zkus znovu.${NC}" ;;
    esac
    echo
  done
}

# Spu≈°tƒõn√≠ hlavn√≠ smyƒçky
main_loop
